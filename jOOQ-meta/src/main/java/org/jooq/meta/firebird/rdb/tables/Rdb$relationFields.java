/*
 * This file is generated by jOOQ.
 */
package org.jooq.meta.firebird.rdb.tables;


import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.meta.firebird.rdb.DefaultSchema;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rdb$relationFields extends TableImpl<Record> {

    private static final long serialVersionUID = 1992408684;

    /**
     * The reference instance of <code>RDB$RELATION_FIELDS</code>
     */
    public static final Rdb$relationFields RDB$RELATION_FIELDS = new Rdb$relationFields();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>RDB$RELATION_FIELDS.RDB$FIELD_NAME</code>.
     */
    public final TableField<Record, String> RDB$FIELD_NAME = createField("RDB$FIELD_NAME", org.jooq.impl.SQLDataType.CHAR(31), this, "");

    /**
     * The column <code>RDB$RELATION_FIELDS.RDB$RELATION_NAME</code>.
     */
    public final TableField<Record, String> RDB$RELATION_NAME = createField("RDB$RELATION_NAME", org.jooq.impl.SQLDataType.CHAR(31), this, "");

    /**
     * The column <code>RDB$RELATION_FIELDS.RDB$FIELD_SOURCE</code>.
     */
    public final TableField<Record, String> RDB$FIELD_SOURCE = createField("RDB$FIELD_SOURCE", org.jooq.impl.SQLDataType.CHAR(31), this, "");

    /**
     * The column <code>RDB$RELATION_FIELDS.RDB$QUERY_NAME</code>.
     */
    public final TableField<Record, String> RDB$QUERY_NAME = createField("RDB$QUERY_NAME", org.jooq.impl.SQLDataType.CHAR(31), this, "");

    /**
     * The column <code>RDB$RELATION_FIELDS.RDB$BASE_FIELD</code>.
     */
    public final TableField<Record, String> RDB$BASE_FIELD = createField("RDB$BASE_FIELD", org.jooq.impl.SQLDataType.CHAR(31), this, "");

    /**
     * The column <code>RDB$RELATION_FIELDS.RDB$EDIT_STRING</code>.
     */
    public final TableField<Record, String> RDB$EDIT_STRING = createField("RDB$EDIT_STRING", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>RDB$RELATION_FIELDS.RDB$FIELD_POSITION</code>.
     */
    public final TableField<Record, Short> RDB$FIELD_POSITION = createField("RDB$FIELD_POSITION", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$RELATION_FIELDS.RDB$QUERY_HEADER</code>.
     */
    public final TableField<Record, String> RDB$QUERY_HEADER = createField("RDB$QUERY_HEADER", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$RELATION_FIELDS.RDB$UPDATE_FLAG</code>.
     */
    public final TableField<Record, Short> RDB$UPDATE_FLAG = createField("RDB$UPDATE_FLAG", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$RELATION_FIELDS.RDB$FIELD_ID</code>.
     */
    public final TableField<Record, Short> RDB$FIELD_ID = createField("RDB$FIELD_ID", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$RELATION_FIELDS.RDB$VIEW_CONTEXT</code>.
     */
    public final TableField<Record, Short> RDB$VIEW_CONTEXT = createField("RDB$VIEW_CONTEXT", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$RELATION_FIELDS.RDB$DESCRIPTION</code>.
     */
    public final TableField<Record, String> RDB$DESCRIPTION = createField("RDB$DESCRIPTION", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$RELATION_FIELDS.RDB$DEFAULT_VALUE</code>.
     */
    public final TableField<Record, byte[]> RDB$DEFAULT_VALUE = createField("RDB$DEFAULT_VALUE", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>RDB$RELATION_FIELDS.RDB$SYSTEM_FLAG</code>.
     */
    public final TableField<Record, Short> RDB$SYSTEM_FLAG = createField("RDB$SYSTEM_FLAG", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>RDB$RELATION_FIELDS.RDB$SECURITY_CLASS</code>.
     */
    public final TableField<Record, String> RDB$SECURITY_CLASS = createField("RDB$SECURITY_CLASS", org.jooq.impl.SQLDataType.CHAR(31), this, "");

    /**
     * The column <code>RDB$RELATION_FIELDS.RDB$COMPLEX_NAME</code>.
     */
    public final TableField<Record, String> RDB$COMPLEX_NAME = createField("RDB$COMPLEX_NAME", org.jooq.impl.SQLDataType.CHAR(31), this, "");

    /**
     * The column <code>RDB$RELATION_FIELDS.RDB$NULL_FLAG</code>.
     */
    public final TableField<Record, Short> RDB$NULL_FLAG = createField("RDB$NULL_FLAG", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$RELATION_FIELDS.RDB$DEFAULT_SOURCE</code>.
     */
    public final TableField<Record, String> RDB$DEFAULT_SOURCE = createField("RDB$DEFAULT_SOURCE", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$RELATION_FIELDS.RDB$COLLATION_ID</code>.
     */
    public final TableField<Record, Short> RDB$COLLATION_ID = createField("RDB$COLLATION_ID", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$RELATION_FIELDS.RDB$GENERATOR_NAME</code>.
     */
    public final TableField<Record, String> RDB$GENERATOR_NAME = createField("RDB$GENERATOR_NAME", org.jooq.impl.SQLDataType.CHAR(31), this, "");

    /**
     * The column <code>RDB$RELATION_FIELDS.RDB$IDENTITY_TYPE</code>.
     */
    public final TableField<Record, Short> RDB$IDENTITY_TYPE = createField("RDB$IDENTITY_TYPE", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * Create a <code>RDB$RELATION_FIELDS</code> table reference
     */
    public Rdb$relationFields() {
        this(DSL.name("RDB$RELATION_FIELDS"), null);
    }

    /**
     * Create an aliased <code>RDB$RELATION_FIELDS</code> table reference
     */
    public Rdb$relationFields(String alias) {
        this(DSL.name(alias), RDB$RELATION_FIELDS);
    }

    /**
     * Create an aliased <code>RDB$RELATION_FIELDS</code> table reference
     */
    public Rdb$relationFields(Name alias) {
        this(alias, RDB$RELATION_FIELDS);
    }

    private Rdb$relationFields(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Rdb$relationFields(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$relationFields as(String alias) {
        return new Rdb$relationFields(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$relationFields as(Name alias) {
        return new Rdb$relationFields(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$relationFields rename(String name) {
        return new Rdb$relationFields(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$relationFields rename(Name name) {
        return new Rdb$relationFields(name, null);
    }
}
