/*
 * This file is generated by jOOQ.
 */
package org.jooq.meta.firebird.rdb.tables;


import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.meta.firebird.rdb.DefaultSchema;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rdb$procedures extends TableImpl<Record> {

    private static final long serialVersionUID = -55369294;

    /**
     * The reference instance of <code>RDB$PROCEDURES</code>
     */
    public static final Rdb$procedures RDB$PROCEDURES = new Rdb$procedures();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>RDB$PROCEDURES.RDB$PROCEDURE_NAME</code>.
     */
    public final TableField<Record, String> RDB$PROCEDURE_NAME = createField("RDB$PROCEDURE_NAME", org.jooq.impl.SQLDataType.CHAR(31), this, "");

    /**
     * The column <code>RDB$PROCEDURES.RDB$PROCEDURE_ID</code>.
     */
    public final TableField<Record, Short> RDB$PROCEDURE_ID = createField("RDB$PROCEDURE_ID", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$PROCEDURES.RDB$PROCEDURE_INPUTS</code>.
     */
    public final TableField<Record, Short> RDB$PROCEDURE_INPUTS = createField("RDB$PROCEDURE_INPUTS", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$PROCEDURES.RDB$PROCEDURE_OUTPUTS</code>.
     */
    public final TableField<Record, Short> RDB$PROCEDURE_OUTPUTS = createField("RDB$PROCEDURE_OUTPUTS", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$PROCEDURES.RDB$DESCRIPTION</code>.
     */
    public final TableField<Record, String> RDB$DESCRIPTION = createField("RDB$DESCRIPTION", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$PROCEDURES.RDB$PROCEDURE_SOURCE</code>.
     */
    public final TableField<Record, String> RDB$PROCEDURE_SOURCE = createField("RDB$PROCEDURE_SOURCE", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$PROCEDURES.RDB$PROCEDURE_BLR</code>.
     */
    public final TableField<Record, byte[]> RDB$PROCEDURE_BLR = createField("RDB$PROCEDURE_BLR", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>RDB$PROCEDURES.RDB$SECURITY_CLASS</code>.
     */
    public final TableField<Record, String> RDB$SECURITY_CLASS = createField("RDB$SECURITY_CLASS", org.jooq.impl.SQLDataType.CHAR(31), this, "");

    /**
     * The column <code>RDB$PROCEDURES.RDB$OWNER_NAME</code>.
     */
    public final TableField<Record, String> RDB$OWNER_NAME = createField("RDB$OWNER_NAME", org.jooq.impl.SQLDataType.CHAR(31), this, "");

    /**
     * The column <code>RDB$PROCEDURES.RDB$RUNTIME</code>.
     */
    public final TableField<Record, byte[]> RDB$RUNTIME = createField("RDB$RUNTIME", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>RDB$PROCEDURES.RDB$SYSTEM_FLAG</code>.
     */
    public final TableField<Record, Short> RDB$SYSTEM_FLAG = createField("RDB$SYSTEM_FLAG", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>RDB$PROCEDURES.RDB$PROCEDURE_TYPE</code>.
     */
    public final TableField<Record, Short> RDB$PROCEDURE_TYPE = createField("RDB$PROCEDURE_TYPE", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$PROCEDURES.RDB$VALID_BLR</code>.
     */
    public final TableField<Record, Short> RDB$VALID_BLR = createField("RDB$VALID_BLR", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$PROCEDURES.RDB$DEBUG_INFO</code>.
     */
    public final TableField<Record, byte[]> RDB$DEBUG_INFO = createField("RDB$DEBUG_INFO", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>RDB$PROCEDURES.RDB$ENGINE_NAME</code>.
     */
    public final TableField<Record, String> RDB$ENGINE_NAME = createField("RDB$ENGINE_NAME", org.jooq.impl.SQLDataType.CHAR(31), this, "");

    /**
     * The column <code>RDB$PROCEDURES.RDB$ENTRYPOINT</code>.
     */
    public final TableField<Record, String> RDB$ENTRYPOINT = createField("RDB$ENTRYPOINT", org.jooq.impl.SQLDataType.CHAR, this, "");

    /**
     * The column <code>RDB$PROCEDURES.RDB$PACKAGE_NAME</code>.
     */
    public final TableField<Record, String> RDB$PACKAGE_NAME = createField("RDB$PACKAGE_NAME", org.jooq.impl.SQLDataType.CHAR(31), this, "");

    /**
     * The column <code>RDB$PROCEDURES.RDB$PRIVATE_FLAG</code>.
     */
    public final TableField<Record, Short> RDB$PRIVATE_FLAG = createField("RDB$PRIVATE_FLAG", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * Create a <code>RDB$PROCEDURES</code> table reference
     */
    public Rdb$procedures() {
        this(DSL.name("RDB$PROCEDURES"), null);
    }

    /**
     * Create an aliased <code>RDB$PROCEDURES</code> table reference
     */
    public Rdb$procedures(String alias) {
        this(DSL.name(alias), RDB$PROCEDURES);
    }

    /**
     * Create an aliased <code>RDB$PROCEDURES</code> table reference
     */
    public Rdb$procedures(Name alias) {
        this(alias, RDB$PROCEDURES);
    }

    private Rdb$procedures(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Rdb$procedures(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$procedures as(String alias) {
        return new Rdb$procedures(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rdb$procedures as(Name alias) {
        return new Rdb$procedures(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$procedures rename(String name) {
        return new Rdb$procedures(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rdb$procedures rename(Name name) {
        return new Rdb$procedures(name, null);
    }
}
