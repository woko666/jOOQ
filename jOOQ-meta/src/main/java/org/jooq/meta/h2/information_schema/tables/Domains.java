/*
 * This file is generated by jOOQ.
 */
package org.jooq.meta.h2.information_schema.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.meta.h2.information_schema.InformationSchema;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Domains extends TableImpl<Record> {

    private static final long serialVersionUID = -1042876127;

    /**
     * The reference instance of <code>INFORMATION_SCHEMA.DOMAINS</code>
     */
    public static final Domains DOMAINS = new Domains();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>INFORMATION_SCHEMA.DOMAINS.DOMAIN_CATALOG</code>.
     */
    public static final TableField<Record, String> DOMAIN_CATALOG = createField("DOMAIN_CATALOG", org.jooq.impl.SQLDataType.VARCHAR(2147483647), DOMAINS, "");

    /**
     * The column <code>INFORMATION_SCHEMA.DOMAINS.DOMAIN_SCHEMA</code>.
     */
    public static final TableField<Record, String> DOMAIN_SCHEMA = createField("DOMAIN_SCHEMA", org.jooq.impl.SQLDataType.VARCHAR(2147483647), DOMAINS, "");

    /**
     * The column <code>INFORMATION_SCHEMA.DOMAINS.DOMAIN_NAME</code>.
     */
    public static final TableField<Record, String> DOMAIN_NAME = createField("DOMAIN_NAME", org.jooq.impl.SQLDataType.VARCHAR(2147483647), DOMAINS, "");

    /**
     * The column <code>INFORMATION_SCHEMA.DOMAINS.COLUMN_DEFAULT</code>.
     */
    public static final TableField<Record, String> COLUMN_DEFAULT = createField("COLUMN_DEFAULT", org.jooq.impl.SQLDataType.VARCHAR(2147483647), DOMAINS, "");

    /**
     * The column <code>INFORMATION_SCHEMA.DOMAINS.IS_NULLABLE</code>.
     */
    public static final TableField<Record, String> IS_NULLABLE = createField("IS_NULLABLE", org.jooq.impl.SQLDataType.VARCHAR(2147483647), DOMAINS, "");

    /**
     * The column <code>INFORMATION_SCHEMA.DOMAINS.DATA_TYPE</code>.
     */
    public static final TableField<Record, Integer> DATA_TYPE = createField("DATA_TYPE", org.jooq.impl.SQLDataType.INTEGER, DOMAINS, "");

    /**
     * The column <code>INFORMATION_SCHEMA.DOMAINS.PRECISION</code>.
     */
    public static final TableField<Record, Integer> PRECISION = createField("PRECISION", org.jooq.impl.SQLDataType.INTEGER, DOMAINS, "");

    /**
     * The column <code>INFORMATION_SCHEMA.DOMAINS.SCALE</code>.
     */
    public static final TableField<Record, Integer> SCALE = createField("SCALE", org.jooq.impl.SQLDataType.INTEGER, DOMAINS, "");

    /**
     * The column <code>INFORMATION_SCHEMA.DOMAINS.TYPE_NAME</code>.
     */
    public static final TableField<Record, String> TYPE_NAME = createField("TYPE_NAME", org.jooq.impl.SQLDataType.VARCHAR(2147483647), DOMAINS, "");

    /**
     * The column <code>INFORMATION_SCHEMA.DOMAINS.SELECTIVITY</code>.
     */
    public static final TableField<Record, Integer> SELECTIVITY = createField("SELECTIVITY", org.jooq.impl.SQLDataType.INTEGER, DOMAINS, "");

    /**
     * The column <code>INFORMATION_SCHEMA.DOMAINS.CHECK_CONSTRAINT</code>.
     */
    public static final TableField<Record, String> CHECK_CONSTRAINT = createField("CHECK_CONSTRAINT", org.jooq.impl.SQLDataType.VARCHAR(2147483647), DOMAINS, "");

    /**
     * The column <code>INFORMATION_SCHEMA.DOMAINS.REMARKS</code>.
     */
    public static final TableField<Record, String> REMARKS = createField("REMARKS", org.jooq.impl.SQLDataType.VARCHAR(2147483647), DOMAINS, "");

    /**
     * The column <code>INFORMATION_SCHEMA.DOMAINS.SQL</code>.
     */
    public static final TableField<Record, String> SQL = createField("SQL", org.jooq.impl.SQLDataType.VARCHAR(2147483647), DOMAINS, "");

    /**
     * The column <code>INFORMATION_SCHEMA.DOMAINS.ID</code>.
     */
    public static final TableField<Record, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER, DOMAINS, "");

    /**
     * No further instances allowed
     */
    private Domains() {
        this(DSL.name("DOMAINS"), null);
    }

    private Domains(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Domains(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Domains(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, DOMAINS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }
}
