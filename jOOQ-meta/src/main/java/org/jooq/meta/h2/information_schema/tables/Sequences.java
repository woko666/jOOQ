/*
 * This file is generated by jOOQ.
 */
package org.jooq.meta.h2.information_schema.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.meta.h2.information_schema.InformationSchema;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sequences extends TableImpl<Record> {

    private static final long serialVersionUID = -1118138960;

    /**
     * The reference instance of <code>INFORMATION_SCHEMA.SEQUENCES</code>
     */
    public static final Sequences SEQUENCES = new Sequences();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>INFORMATION_SCHEMA.SEQUENCES.SEQUENCE_CATALOG</code>.
     */
    public static final TableField<Record, String> SEQUENCE_CATALOG = createField("SEQUENCE_CATALOG", org.jooq.impl.SQLDataType.VARCHAR(2147483647), SEQUENCES, "");

    /**
     * The column <code>INFORMATION_SCHEMA.SEQUENCES.SEQUENCE_SCHEMA</code>.
     */
    public static final TableField<Record, String> SEQUENCE_SCHEMA = createField("SEQUENCE_SCHEMA", org.jooq.impl.SQLDataType.VARCHAR(2147483647), SEQUENCES, "");

    /**
     * The column <code>INFORMATION_SCHEMA.SEQUENCES.SEQUENCE_NAME</code>.
     */
    public static final TableField<Record, String> SEQUENCE_NAME = createField("SEQUENCE_NAME", org.jooq.impl.SQLDataType.VARCHAR(2147483647), SEQUENCES, "");

    /**
     * The column <code>INFORMATION_SCHEMA.SEQUENCES.CURRENT_VALUE</code>.
     */
    public static final TableField<Record, Long> CURRENT_VALUE = createField("CURRENT_VALUE", org.jooq.impl.SQLDataType.BIGINT, SEQUENCES, "");

    /**
     * The column <code>INFORMATION_SCHEMA.SEQUENCES.INCREMENT</code>.
     */
    public static final TableField<Record, Long> INCREMENT = createField("INCREMENT", org.jooq.impl.SQLDataType.BIGINT, SEQUENCES, "");

    /**
     * The column <code>INFORMATION_SCHEMA.SEQUENCES.IS_GENERATED</code>.
     */
    public static final TableField<Record, Boolean> IS_GENERATED = createField("IS_GENERATED", org.jooq.impl.SQLDataType.BOOLEAN, SEQUENCES, "");

    /**
     * The column <code>INFORMATION_SCHEMA.SEQUENCES.REMARKS</code>.
     */
    public static final TableField<Record, String> REMARKS = createField("REMARKS", org.jooq.impl.SQLDataType.VARCHAR(2147483647), SEQUENCES, "");

    /**
     * The column <code>INFORMATION_SCHEMA.SEQUENCES.CACHE</code>.
     */
    public static final TableField<Record, Long> CACHE = createField("CACHE", org.jooq.impl.SQLDataType.BIGINT, SEQUENCES, "");

    /**
     * The column <code>INFORMATION_SCHEMA.SEQUENCES.MIN_VALUE</code>.
     */
    public static final TableField<Record, Long> MIN_VALUE = createField("MIN_VALUE", org.jooq.impl.SQLDataType.BIGINT, SEQUENCES, "");

    /**
     * The column <code>INFORMATION_SCHEMA.SEQUENCES.MAX_VALUE</code>.
     */
    public static final TableField<Record, Long> MAX_VALUE = createField("MAX_VALUE", org.jooq.impl.SQLDataType.BIGINT, SEQUENCES, "");

    /**
     * The column <code>INFORMATION_SCHEMA.SEQUENCES.IS_CYCLE</code>.
     */
    public static final TableField<Record, Boolean> IS_CYCLE = createField("IS_CYCLE", org.jooq.impl.SQLDataType.BOOLEAN, SEQUENCES, "");

    /**
     * The column <code>INFORMATION_SCHEMA.SEQUENCES.ID</code>.
     */
    public static final TableField<Record, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER, SEQUENCES, "");

    /**
     * No further instances allowed
     */
    private Sequences() {
        this(DSL.name("SEQUENCES"), null);
    }

    private Sequences(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Sequences(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Sequences(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, SEQUENCES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }
}
